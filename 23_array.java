/*
В компании InvestTrade проходит ежегодное мероприятие, посвященное борьбе за звание «Трудолюб года» («The most hardworking employee of the year»). Диплом первой степени вручается тому из сотрудников, который за весь год провел на рабочем месте наибольшее количество часов. Вручаются дипломы только I, II и III степеней. Всего в конкурсе участвует count сотрудников.

Создай публичный класс Task, в котором будут реализованы следующие два статических метода:

1) Напиши публичный метод findAllWinners, который бы получал на вход массив типа double размера count, который будет содержать количество часов, которые count сотрудников провели на рабочем месте за этот год, а также возвращал бы время, которое каждый из призеров в номинации «Трудолюб года» провел на работе.
2) Напиши публичный метод peopleChoiceAward, который бы получал на вход два параметра: общий список участников конкурса и общее количество победителей конкурса. Данный метод должен находить порядковый номер первого попавшегося конкурсанта, который провел на рабочем месте ровно 1500 часов в этом году, среди тех людей, которые не являются призерами.

Предоставь исходный код класса Task.

Примечания:

При решении поставленной задачи для доступа к элементам массивов используй метод getDouble класса Array. Не забудь перед этим импортировать его: import java.lang.reflect.Array.
Для получения массива часов всех победителей конкурса используйте метод copyOfRange() класса Arrays. Не забудьте перед этим импортировать его: import java.util.Arrays.
Для поиска порядкового номера человека, который получает приз зрительских симпатий в методе peopleChoiceAward, используй метод binarySearch() класса Arrays.
В случае, если на вход методу findAllWinners поступает пустой массив, то метод должен вернуть также пустой массив.
В случае, если на вход методу findAllWinners поступает значение null, то метод должен вернуть пустой массив.
В случае, если на вход методу peopleChoiceAward поступает пустой массив, то метод должен возвращать -1.
*/

public class Task{

	public static double[] findAllWinners(double[] a) {
		int c = 0;
		if (a == null) {
			double[] first = new double[0]; //массив для вывода
			return first; //вывод пустого массива
		} else if (a.length == 0) {
			return a; //возврат пустого a
		} else {
			int count = a.length; //длина массива
			int i = 0; //счетчик мест
			//int k = count - 1; //переменная для прохода по массиву
			double[] first = new double[count]; //массив для сбора
			double[] second; //массив для выгрузки
			Arrays.sort(a); //сортируем
			for (int k = count - 1; k>=0; k--) { //бежим по массиву
				if (i == 3) { //считаем только три места
					break;
				} else {
					first[c] = Array.getDouble(a, k); //собираем победителей по местам
					c+=1; //считаем количество победителей
					if (k == 0) { //если массив кончился, а места нет - выходим
						break;
				} else {
					if (a[k-1] != a[k]) { //проверяем все ли призёры на месте
						i+=1; //переходим к другому месту
					}
				}
				}
			}
			second = Arrays.copyOfRange(first, 0, c); //создаём массив только с победителями
			for(int s=0; s<second.length/2; s++) { //бежим по нему
				double j= second[s];
				second[s] = second[second.length -s -1];
				second[second.length -s -1] = j; //расставляем призёров от 3 к 1
			}
			return second; //возврат
		}
	}

	public static int peopleChoiceAward(double[] a, int b) {
		if (a == null) { //проверка на null
			return -1; //возврат
		} else if (a.length == 0 || a.length < b || b<=0) { //проверка на пустой массив и некорректные данные количества
			return -1; //возврат
		} else {
			int count = a.length;
			Arrays.sort(a);
			double[] arr2 = Arrays.copyOfRange(a, 0, count-b); //удаляем победителей
			int pos = Arrays.binarySearch(arr2, 1500); //ищем человека с 1500 часами
			if (pos<0) {
				return -1; //возврат
			} else {
				return pos; //возврат
			}
		}
	}
}