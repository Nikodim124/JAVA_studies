/*
Задача, поставленная разработчику, звучит следующим образом.

Компания Data занимается разработкой программного обеспечения для частных компаний. 
У них есть большая база данных клиентов, с которыми они сотрудничают. 
На данный момент передача данных в таблицах происходит некорректно, т. к. появляются пустые значения.

Аналитикам компании в обязательном порядке нужно перепроверить базы данных клиентов, 
чтобы в дальнейшем не возникало ошибок в работе приложения.

База данных содержит значения номера клиента, номера компании 
и количество транзакций этого клиента в этой компании.

Пример:

int [][]array={{0,0,2},{1,1,5}};
где 0 – номер клиента, 0 – номер компании, 2 – количество транзакций.

Необходимо:

1.	Привести исходный код публичного статичного свободного метода sort(), который принимает двумерный массив данных целых чисел.
2.	Сортировать массив нужно от большего к меньшему по идентификатору клиента.
3.	Сортировку можно осуществить любым способом.
4.	Если внутри двумерного массива один или несколько из вложенных массивов содержит больше или меньше трех значений, 
то сортировка не выполняется, а на консоль необходимо вывести сообщение “Unavailable data at index #” (# - индекс элемента в двумерном массиве).
5.	Если внутри двумерного массива один или несколько из вложенных массивов содержит null, то сортировка не выполняется, 
а на консоль выводится сообщение: “Empty data at index #” (# - индекс элемента в двумерном массиве).
6.	Если двумерный массив равен null, то сортировка не выполняется, а на консоль выводится сообщение: “Empty data”.

*/

public static void sort(int s[][]) {
	int n = 0; //флажок ошибок
	if (s == null) { //проверка на "двумерный массив равен null"
		System.out.println("Empty data");
		n+=1;
	} else if (s.length == 0) {
		System.out.println("Empty data");
	} else { //иначе проверяем дальше
		for (int k = 0; k < s.length; k++) { //заходим внутрь
			if (s[k] == null) { //проверяем каждый вложенный массив на null
				System.out.println("Empty data at index "+k);
				n+=1;
				break;
			} else if (s[k].length > 3 || s[k].length < 3) { //проверяем каждый вложенный массив на количество элементов
				System.out.println("Unavailable data at index "+k);
				n+=1;
				break;
			}
		}
	}
	if (n == 0) { //если ошибок нет, можно сортировать
		Arrays.sort(s, new Comparator<int[]>() {
			public int compare(final int[] entry1,
			final int[] entry2) { //начинаем сортировать
				if (entry1[0] < entry2[0]) //сравниваем элементы в нужной нам колонке
					return 1;
				else
					return -1;
			}
		});
		for (int i = 0; i < s.length; i++) {
			for (int j = 0; j < s[i].length; j++)
				System.out.print(s[i][j] + " ");
				System.out.println(); //выводим окончаетльный массив
		}
	}
}
